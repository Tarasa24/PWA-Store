@page "/Search"

<main>
  @if (apps != null)
  {
    @foreach (var app in apps)
    {
      <a class="flex-none block mb-2 mr-2 flex snap-start truncate items-center" href="/AppDetail/@app.AppID">
        <span class="flex-none self-center text-center w-12 mr-2" title="score">@app.Score.ToString("0.##")</span>
        <img class="flex-none rounded-lg w-16 object-scale-down" src="@app.IconURL" alt="PWA-OTD icon"
          onerror="this.src='icon-54.png';">
        <div class="flex-auto ml-2 truncate">
          <span class="text-l font-bold text-gray-900">
            @app.Name
          </span>
          <p class="text-xs text-gray-700 truncate" title="@app.Description">
            @app.Description
          </p>
          @if (app.RatingAverage != null)
          {
            <span class="flex items-center">
              <b class="text-s">@String.Format("{0:0.00}", app.RatingAverage)</b>
              <Star Rating="1" MaxRating="1" />
            </span>
          }
        </div>
      </a>
    }
  }
  else
  {
    @for (int i = 0; i < 15; i++)
    {
      <a class="block mb-2 mr-6 flex snap-start animate-pulse" href="/AppDetail/@i">
        <span class="self-center w-12 mr-2">
          <div class="w-4 h-3 mx-[auto] rounded-full bg-gray-700"></div>
        </span>
        <SkeletonImage Class="flex-none rounded-lg w-[64px] h-[64px] mr-4 object-cover" />
        <div class="flex-auto ml-2 truncate">
          <div class="h-3 mt-2 rounded-full bg-gray-700 w-[@rng.Next(10, 21)em] mb-4"></div>
          <div class="h-3 mt-2 rounded-full bg-gray-700 w-[@rng.Next(25, 32)em] mb-4"></div>
        </div>
      </a>
    }
  }
</main>

@code
{
  private Random rng = new Random();
  [Parameter]
  [SupplyParameterFromQuery(Name = "s")]
  public string? SearchText { get; set; }

  public SearchApp[] apps { get; set; }

  protected override async Task OnInitializedAsync()
  {
    apps = null;
    await GetSearch();
  }
  protected override async Task OnParametersSetAsync()
  {
    apps = null;
    StateHasChanged();
    await GetSearch();
  }

  private async Task GetSearch()
  {
    if (SearchText == null)
    {
      return;
    }
    apps = await Http.GetFromJsonAsync<SearchApp[]>("/Search?s=" + SearchText);
    StateHasChanged();
  }
}